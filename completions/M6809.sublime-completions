{
  "scope": "source.mc6809",
  "completions":
  [
    { "trigger": "abx", "contents": "abx " },
    { "trigger": "adca\tAdd Memory Byte plus Carry", "contents": "adca " },
    { "trigger": "adcb\tAdd Memory Byte plus Carry", "contents": "adcb " },
    { "trigger": "adda\tAdd Memory Byte", "contents": "adda " },
    { "trigger": "addb\tAdd Memory Byte", "contents": "addb " },
    { "trigger": "addd\tAdd Memory Word", "contents": "addd " },
    { "trigger": "anda\tLogically AND", "contents": "anda " },
    { "trigger": "andb\tLogically AND", "contents": "andb " },
    { "trigger": "andcc\tLogically AND", "contents": "andcc #" },
    { "trigger": "asla\tArithmetic Shift Left", "contents": "asla " },
    { "trigger": "aslb\tArithmetic Shift Left", "contents": "asrb " },
    { "trigger": "asl\tArithmetic Shift Left", "contents": "asl " },
    { "trigger": "asra\tArithmetic Shift Right", "contents": "asra " },
    { "trigger": "asrb\tArithmetic Shift Right", "contents": "asrb " },
    { "trigger": "asr\tArithmetic Shift Right", "contents": "asr " },
    { "trigger": "bcc\tBranch if Carry Clear", "contents": "bcc " },
    { "trigger": "bcs\tBranch if Carry Set", "contents": "bcs " },
    { "trigger": "beq\tBranch if = 0", "contents": "beq " },
    { "trigger": "bge\tBranch if >= 0 ", "contents": "bge " },
    { "trigger": "bgt\tBranch if > 0 ", "contents": "bgt " },
    { "trigger": "bhi\tBranch if Higher", "contents": "bhi " },
    { "trigger": "bhs\tBranch if Higher or Same", "contents": "bhs " },
    { "trigger": "bita\tBit Test", "contents": "bita " },
    { "trigger": "bitb\tBit Test", "contents": "bitb " },
    { "trigger": "ble\tBranch if <= 0", "contents": "ble " },
    { "trigger": "blo\tBranch if <", "contents": "blo " },
    { "trigger": "bls\tBranch if <=", "contents": "bls " },
    { "trigger": "blt\tBranch if < 0", "contents": "blt " },
    { "trigger": "bmi\tBranch if Minus", "contents": "bmi " },
    { "trigger": "bne\tBranch if <> 0", "contents": "bne " },
    { "trigger": "bpl\tBranch if Plus", "contents": "bpl " },
    { "trigger": "bra\tBranch Always", "contents": "bra " },
    { "trigger": "brn\tBranch Never", "contents": "brn " },
    { "trigger": "bsr\tBranch to Subroutine", "contents": "bsr " },
    { "trigger": "bvc\tBranch if Overflow Clear", "contents": "bvc " },
    { "trigger": "bvs\tBranch if Overflow Set", "contents": "bvs " },
    { "trigger": "clra\tClear", "contents": "clra " },
    { "trigger": "clrb\tClear", "contents": "clrb " },
    { "trigger": "clr\tClear", "contents": "clr " },
    { "trigger": "cmpa\tCompare", "contents": "cmpa " },
    { "trigger": "cmpb\tCompare", "contents": "cmpb " },
    { "trigger": "cmpd\tCompare", "contents": "cmpd " },
    { "trigger": "cmps\tCompare", "contents": "cmps " },
    { "trigger": "cmpu\tCompare", "contents": "cmpu " },
    { "trigger": "cmpx\tCompare", "contents": "cmpx " },
    { "trigger": "cmpy\tCompare", "contents": "cmpy " },
    { "trigger": "cmpr\tCompare", "contents": "cmpr " },
    { "trigger": "coma\tComplement", "contents": "coma " },
    { "trigger": "comb\tComplement", "contents": "comb " },
    { "trigger": "com\tComplement", "contents": "com " },
    { "trigger": "cwai", "contents": "cwai " },
    { "trigger": "daa\tDecimal Addition Adjust", "contents": "daa " },
    { "trigger": "deca\tDecrement", "contents": "deca " },
    { "trigger": "decb\tDecrement", "contents": "decb " },
    { "trigger": "dec\tDecrement", "contents": "dec " },
    { "trigger": "eora\tExclusively-OR", "contents": "eora " },
    { "trigger": "eorb\tExclusively-OR", "contents": "eorb " },
    { "trigger": "exg\tExchange", "contents": "exg " },
    { "trigger": "inca\tIncrement", "contents": "inca " },
    { "trigger": "incb\tIncrement", "contents": "incb " },
    { "trigger": "inc\tIncrement", "contents": "inc " },
    { "trigger": "jmp\tJump", "contents": "jmp " },
    { "trigger": "jsr\tJump to Subroutine", "contents": "jsr " },
    { "trigger": "lbcc\tLong Branch if Carry Clear", "contents": "lbcc " },
    { "trigger": "lbcs\tLong Branch if Carry Set", "contents": "lbcs " },
    { "trigger": "lbeq\tLong Branch if = 0", "contents": "lbeq " },
    { "trigger": "lbge\tLong Branch if >= 0", "contents": "lbge " },
    { "trigger": "lbgt\tLong Branch if > 0", "contents": "lbgt " },
    { "trigger": "lbhi\tLong Branch if Higher", "contents": "lbhi " },
    { "trigger": "lbhs\tLong Branch if Higher or Same", "contents": "lbhs " },
    { "trigger": "lble\tLong Branch if <= 0", "contents": "lble " },
    { "trigger": "lblo\tLong Branch if <", "contents": "lblo " },
    { "trigger": "lbls\tLong Branch if <=", "contents": "lbls " },
    { "trigger": "lblt\tLong Branch if < 0", "contents": "lblt " },
    { "trigger": "lbmi\tLong Branch if Minus", "contents": "lbmi " },
    { "trigger": "lbne\tLong Branch if <> 0", "contents": "lbne " },
    { "trigger": "lbpl\tLong Branch if Plus", "contents": "lbpl " },
    { "trigger": "lbra\tLong Branch Always", "contents": "lbra " },
    { "trigger": "lbrn\tLong Branch Never", "contents": "lbrn " },
    { "trigger": "lbsr\tLong Branch to Subroutine ", "contents": "lbsr " },
    { "trigger": "lbvc\tLong Branch if Overflow Clear", "contents": "lbvc " },
    { "trigger": "lbvs\tLong Branch if Overflow Set", "contents": "lbvs " },
    { "trigger": "lda", "contents": "lda " },
    { "trigger": "ldb", "contents": "ldb " },
    { "trigger": "ldd", "contents": "ldd " },
    { "trigger": "lds", "contents": "lds " },
    { "trigger": "ldu", "contents": "ldu " },
    { "trigger": "ldx", "contents": "ldx " },
    { "trigger": "ldy", "contents": "ldy " },
    { "trigger": "leas", "contents": "leas " },
    { "trigger": "leau", "contents": "leau " },
    { "trigger": "leax", "contents": "leax " },
    { "trigger": "leay", "contents": "leay " },
    { "trigger": "lsla\tLogical Shift Left", "contents": "lsla " },
    { "trigger": "lslb\tLogical Shift Left", "contents": "lslb " },
    { "trigger": "lsl\tLogical Shift Left", "contents": "lsl " },
    { "trigger": "lsra\tLogical Shift Right", "contents": "lsra " },
    { "trigger": "lsrb\tLogical Shift Right", "contents": "lsrb " },
    { "trigger": "lsr\tLogical Shift Right", "contents": "lsr " },
    { "trigger": "mul\tMulitply", "contents": "mul " },
    { "trigger": "nega\tNegate (Twos-Complement)", "contents": "nega " },
    { "trigger": "negb\tNegate (Twos-Complement)", "contents": "negb " },
    { "trigger": "neg\tNegate (Twos-Complement)", "contents": "neg " },
    { "trigger": "nop\tNo Operation", "contents": "nop " },
    { "trigger": "ora\tLogically OR", "contents": "ora " },
    { "trigger": "orb\tLogically OR", "contents": "orb " },
    { "trigger": "orcc\tLogically OR", "contents": "orcc #" },
    { "trigger": "pshs\tPush Registers onto Stack", "contents": "pshs " },
    { "trigger": "pshu\tPush Registers onto Stack", "contents": "pshu " },
    { "trigger": "puls\tPull Registers from Stack", "contents": "puls " },
    { "trigger": "pulu\tPull Registers from Stack", "contents": "pulu " },
    { "trigger": "rola\tRotate Left", "contents": "rola " },
    { "trigger": "rolb\tRotate Left", "contents": "rolb " },
    { "trigger": "rol\tRotate Left", "contents": "rol " },
    { "trigger": "rora\tRotate Right", "contents": "rora " },
    { "trigger": "rorb\tRotate Right", "contents": "rorb " },
    { "trigger": "ror\tRotate Right", "contents": "ror " },
    { "trigger": "rti\tReturn from Interrupt", "contents": "rti " },
    { "trigger": "rts\tReturn from Subroutine", "contents": "rts " },
    { "trigger": "sbca", "contents": "sbca " },
    { "trigger": "sbcb", "contents": "sbcb " },
    { "trigger": "sex", "contents": "sex " },
    { "trigger": "sta", "contents": "sta " },
    { "trigger": "stb", "contents": "stb " },
    { "trigger": "std", "contents": "std " },
    { "trigger": "sts", "contents": "sts " },
    { "trigger": "stu", "contents": "stu " },
    { "trigger": "stx", "contents": "stx " },
    { "trigger": "sty", "contents": "sty " },
    { "trigger": "suba", "contents": "suba " },
    { "trigger": "subb", "contents": "subb " },
    { "trigger": "subd", "contents": "subd " },
    { "trigger": "swi\tSoftware Interrupt", "contents": "swi " },
    { "trigger": "swi2\tSoftware Interrupt #2", "contents": "swi2 " },
    { "trigger": "swi3\tSoftware Interrupt #3", "contents": "swi3 " },
    { "trigger": "sync\tSynchronize with Interrupt", "contents": "sync " },
    { "trigger": "tfr\tTransfer Register to Register", "contents": "tfr " },
    { "trigger": "tsta\tTest", "contents": "tsta " },
    { "trigger": "tstb\tTest", "contents": "tstb " },
    { "trigger": "tst\tTest", "contents": "tst " }
  ]
}
