%YAML 1.2
---

name: Assembly 6809/6309

file_extensions:
  - asm
  - src
  - s

scope: source.asm.6809

variables:
  num_bin: '(?:[01][01]*)'
  num_oct: '(?:[0-7][0-7]*)'
  num_dec: '(?:\d\d*)'
  num_hex: '(?:\h\h*)'
  symbol_identifier: '(?:[A-Za-z\.\@\_!\?][A-Za-z0-9\.\@\$\_\?]*)'
  all_registers: '(cc|dp|pc|[0abdefsuvwxy])'
  ustack: '(cc|dp|pc|[abdsxy]|)'
  sstack: '(cc|dp|pc|[abduxy]|)'
  # HEXFRC: (?:{{HEXNUM}})?
  # HEXNUM: '\h(_?\h)*'
  # num_hex: ''
  # address: '\$(?:[0-9A-F]){4}|[0-9]{5}'
  # hex_number: '\$(?:[0-9A-F][0-9A-F]){1,2}'
  # oct_number: '@[0-9]+'
  # bin_number: '%[01]+'
  # dec_number: '-?[0-9.]+'

contexts:
  line-ending:
    - match: $
      pop: true

  skip-white-spaces:
    - match: \s*

  comments:
    - match: '(?:([*;])).*$\n?'
      scope: comment.line.asm.6809
      captures:
        1: punctuation.definition.comment.asm.6809
      pop: true

  comments-eol:
    - include: skip-white-spaces
    - include: comments
    - match: '.*$'
      scope: comment.line.asm.6809
      pop: true


  main:
    - include: column_1


  column_1:
    # Blank column one
    - match: '^\s+'
      push: column_2

    # Line begins with a comment
    - match: '^([*;#]).*$'
      scope: comment.line.asm.6809
      captures:
        1: punctuation.definition.comment.asm.6809

    # Disassembly listing
    - match: '^\h{4}\:\s'
      scope: comment.line.asm.6809
      push: disassembly

    # Label
    - match: '^{{symbol_identifier}}'
      scope: entity.name.type.constant.asm.6809
      push:
        - match: '\s+'
          set:
            - include: structures
            - include: macros
            - include: column_2
        - include: line-ending

    # Use for debugging. It should not match anything.
    #- match: '.*$'
    #  scope: invalid.illegal.entity.name.type.constant.asm.6809


  column_2:
    - include: mnemonics
    - include: directives
    - include: pragmas
    - include: comments
    - include: emulator-extensions
    - include: os9
    - include: line-ending

    # No match. Mark as invalid
    - match: \S*$?
      scope: invalid.keyword.operator.asm.6809
      set: comments-eol


  mnemonics:
    # Addressing mode: Inherent
    - match: |-
        (?ix:
             abx|daa|mul|nop|rt[is]|
             s(wi[23]?|exw?|ync)|
             ((as|ls|ro)[lr]|neg)[abd]|
             (clr|com|dec|inc|tst)[abdefw]|
             (p(sh|ul)[su]|ro[lr]|lsr)w
        )(?!\S)
      scope: keyword.operator.asm.6809
      set: comments-eol

    # Branch instructions
    - match: (?i)l?b([cv][cs]|eq|gt|h[is]|l[ost]|r[an]|mi|pl|sr|[gnl]e)(?!\S)
      scope: keyword.operator.asm.6809
      set:
        - match: '<'
          scope: constant.other.asm.6809
          set: comments-eol
        - match: '>'
          scope: source.asm.6809 constant.other.asm.6809
          set: comments-eol
        - match: '{{symbol_identifier}}'
          scope: constant.other.asm.6809
          set: comments-eol
        - include: line-ending

    # Jump instructions
    - match: (?i)jmp|jsr(?!\S)
      scope: keyword.operator.asm.6809
      set:
        - include: skip-white-spaces
        - include: address-direct
        - include: address-index
        - include: address-extended
        - match: '{{symbol_identifier}}'
          scope: constant.other.asm.6809
          set: comments-eol
        - match: '\S*'
          scope: invalid.illegal.constant.language.register.asm.6809
          set: comments-eol
        - include: line-ending

    # Addressing modes: Immediate #i8
    - match: (?i)(and|or)cc|(bit|ld)md|cwai(?!\S)
      scope: keyword.operator.asm.6809
      set:
        - include: skip-white-spaces
        - include: address-immediate
        - include: line-ending

    # Addressing modes: Immediate r0,r1
    - match: (?i)(ad[cd]|and|eor|cmp|or|s(bc|ub)|tf)r|exg(?!\S)
      scope: keyword.operator.asm.6809
      set:
        - include: skip-white-spaces
        - match: (?i)(?:(?={{all_registers}},{{all_registers}}))
          set: highlight-registers
        - match: '\S*'
          scope: invalid.illegal.constant.language.register.asm.6809
          set: comments-eol
        - include: line-ending

    # Addressing modes: Immediate, Direct, Indexed and Extended
    - match: |-
        (?ix:
            (adc|and|bit|e?or|sbc)[ab]|
            (add|sub)[abd]|
            (as|ls|ro)[lr]|
            clr|com|dec|inc|neg|tst|
            (cmp|ld|st)[abdsuxy]|
            lea[suxy]
        )(?!\S)
      scope: keyword.operator.asm.6809
      set:
        - include: skip-white-spaces
        - include: address-immediate
        - include: address-direct
        - include: address-index
        - include: address-extended
        - include: labels
        #- include: operators
        - match: ''
          set: comments-eol
        - match: '\S*'
          scope: invalid.illegal.constant.language.register.asm.6809
          set: comments-eol
        - include: line-ending

    # PSHS and PULS instructions
    - match: '(?i)pshs|puls(?!\S)'
      scope: keyword.operator.asm.6809
      set:
        - include: skip-white-spaces
        - match: (?=[\S\w]*s[\S\w]*\s)
          set: invalid-registers
        - match: ''
          set: validate-stack-registers

    # PSHU and PULU instructions
    - match: '(?i)pshu|pulu(?!\S)'
      scope: keyword.operator.asm.6809
      set:
        - include: skip-white-spaces
        - match: (?=[\S\w]*u[\S\w]*\s)
          set: invalid-registers
        - match: ''
          set: validate-stack-registers

    #  6309 xxx
    # TODO! process after instruction
    - match: |-
        (?ix:
            a(dcd|im|ndd)|
            (add|cmp|ld|st|sub)[efw]|
            b(and|e?or|i(and|e?or)|itd)|
            div[dq]|
            [eo]im|e?ord|ldbt|
            (ld|st)q|
            muld|
            s(tbt|bcd)|
            tim
        )(?!\S)
      scope: keyword.operator.asm.6809
      #set: comments-eol
      set:
        - include: skip-white-spaces
        - include: address-immediate
        - match: ''
          set: comments-eol

    # TFM instruction (6309 only)
    - match: (?i)tfm(?!\S)
      scope: keyword.operator.asm.6809
      set:
        - include: skip-white-spaces
        - match: |-
            (?ix:
                (?:
                  (?=[xyusd]\+,[xyusd]\+)|
                  (?=[xyusd]\+,[xyusd]\b)|
                  (?=[xyusd]\-,[xyusd]\-)|
                  (?=[xyusd],[xyusd]\+)
                )
            )
          set: highlight-registers
        - match: '\S*'
          scope: invalid.illegal.constant.language.register.asm.6809
          set: comments-eol
        - include: line-ending

    # Convenience instructions (supported by lwasm)
    - match: (?i)(asr|clr|com|ls[lr]|neg|tst)q|(lsl|neg)[ef]|negw(?!\S)
      scope: keyword.operator.asm.6809
      set: comments-eol

    # Invalid instructions
    - match: (?i)lslw(?!\S)
      scope: invalid.keyword.operator.asm.6809
      set: comments-eol


  # Addressing mode - Immediate
  address-immediate:
    - match: \#
      scope: keyword.operator.immediate.asm.6809
      set:
        - include: numbers
        - include: operators
        - match: '{{symbol_identifier}}'
          scope: constant.other.asm.6809
        - include: line-ending
        - match: ''
          set: comments-eol

  # Addressing mode - Direct (8-bit offset)
  address-direct:
    - match: "<"
      scope: keyword.operator.direct.asm.6809
      set:
        - include: numbers
        - include: line-ending
        - match: '\S*'
          set: comments-eol


  # Addressing mode - Extended (16-bit offset)
  address-extended:
    - match: ">"
      scope: keyword.operator.extended.asm.6809
      set:
        - include: numbers
        - include: line-ending
        - match: '\S*'
          set: comments-eol


  # Addressing mode - Indexed
  address-index:
    # Non-indirect
    - match: |-
        (?ix:
            (?:
              (?=[abdefw],[suxy])|
              (?=,[suxyw])|
              (?=,[suxy]\+)|
              (?=,[suxyw]\+\+)|
              (?=,\-[suxy])|
              (?=,\-\-[suxyw])
            )
        )
      set: highlight-registers
    # Indirect
    - match: |-
        (?ix:
            (?:
              (?=\[,[suxyw]\])|
              (?=\[[abdefw],[suxy]\])|
              (?=\[,[suxyw]\+\+\])|
              (?=\[,\-\-[suxyw]\])
            )
        )
      set: highlight-registers-brackets


  # Validate stack registers
  validate-stack-registers:
    - match: (?<!\S)
      set: highlight-registers
    - include: line-ending


  # Highlight string of registers and commas
  highlight-registers:
    - match: '{{all_registers}}'
      scope: constant.language.register.asm.6809
    - match: ','
      scope: operator.separator.asm.6809
    - match: '[\+\-]'
      scope: keyword.operator.arithmetic.asm.6809
    - match: \s
      set: comments-eol
    - include: line-ending


  # Highlight string of registers and commas between brackets
  highlight-registers-brackets:
    - match: '{{all_registers}}'
      scope: meta.brackets.asm.6809 constant.language.register.asm.6809
    - match: ','
      scope: meta.brackets.asm.6809 operator.separator.asm.6809
    - match: '[\+\-]'
      scope: meta.brackets.asm.6809 keyword.operator.arithmetic.asm.6809
    - match: '\['
      scope: meta.brackets.asm.6809 punctuation.section.brackets.begin.asm.6809
    - match: '\]'
      scope: meta.brackets.asm.6809 punctuation.section.brackets.end.asm.6809
    - match: \s
      set: comments-eol
    - include: line-ending


  # Invalid string of registers
  invalid-registers:
    - match: '[\S\w]'
      scope: invalid.constant.language.register.asm.6809
    - match: \s
      set: comments-eol
    - include: line-ending


  pragmas:
    - match: '(?i)pragma|opt|\*pragma(push|pop)?(?!\S)'
      scope: support.function.directive.assembler.asm.6809
      set:
        - match: '\s*'
          set:
            - match: |-
                (?ix:
                  (no)?(
                    6800compat|
                    6[83]09(conv)?|
                    index0tonone|
                    cescapes|
                    (importundef)?export|
                    undefextern|
                    dollar(not)?local|
                    pcaspcr|
                    shadow|
                    list|
                    autobranchlength|
                    (nosymbol|symbolno)case|
                    condundefzero|
                    forwardrefmax|
                    qrts|
                    m80ext|
                    testmode|
                    c[dtc]?
                  )
                )
              scope: keyword.operator.asm.6809
            - match: ','
              scope: operator.separator.asm.6809
            - match: ''
              set: comments-eol
            - include: line-ending
        - include: line-ending


  directives:
    # data directives with expr
    - match: (?i)f[cdq]b|[zr]m[bdq]|\.(d[bsw]|4?byte|word|quad|blkb|rs)(?!\S)
      scope: storage.type.asm.6809
      set:
        - match: '\s*'
          set:
            - include: numbers
            - include: operators
            - match: ','
              scope: operator.separator.asm.6809
            - include: line-ending
            - match: ''
              set: comments-eol
        - include: line-ending

    # data directives with strings
    - match: (?i)fc[cns]|\.(asci[isz]|str[sz]?)(?!\S)
      scope: storage.type.asm.6809
      set: strings

    # data directives with misc
    - match: (i?)fill(?!\S)
      scope: storage.type.asm.6809
      set:
        - match: '\s*'
          set:
            - include: numbers
            - include: operators
            - match: ','
              scope: operator.separator.asm.6809
            - include: line-ending
            - match: ''
              set: comments-eol
        - include: line-ending

    # Address Definition
    - match: '(?i)(re)?org|equ|set(dp)?|align(?!\S)'
      scope: support.function.address.asm.6809
      set:
        - match: '\s*'
          set:
            - include: numbers
            - include: operators
            - include: labels
            - match: ''
              set: comments-eol
            - include: line-ending
        - include: line-ending

    # Conditional assembly (ccasm)
    - match: (?i)(end(if|p)|ifp[12]|ifge|cond)(?!\S)
      scope: support.function.conditional.asm.6809
      set: comments-eol

    # Conditional assembly (lwasm)
    - match: '(?i)if(eq|ne|gt|lt|le|def|pragma|ndef)?|else|endc(?!\S)'
      scope: support.function.conditional.asm.6809
      set: comments-eol

    # Miscelaneous Directives
    - match: '(?i)include(bin)?|use|end(?!\S)'
      scope: support.function.directive.misc.asm.6809
      set:
        - match: '\s*'
          set:
            - include: numbers
            - include: operators
            - include: labels
            - include: line-ending
            - match: ''
              set: comments-eol
            - include: line-ending
        - include: line-ending


    # Misc directives with string
    - match: '(?i)error|warning(?!\S)'
      scope: support.function.directive.misc.asm.6809
      set: strings
    - match: '(?i).module(?!\S)'
      scope: support.function.directive.misc.asm.6809
      set: strings

    # end statement for macros and structures
    - include: end-macros
    - include: end-structures


  # OS9 Target Directives
  os9:
    - match: '(?i)os9|e?mod(?!\S)'
      scope: support.function.directive.asm.6809
      set:
        - match: '{{symbol_identifier}}'
          scope: constant.other.asm.6809
        - include: line-ending


  # Macro directives
  macros:
    - match: (?i)macro(?!\S)
      scope: support.function.directive.macro.asm.6809
      set:
        - match: (?i)noexpand(?!\S)
          scope: support.function.directive.macro.asm.6809
          set: comments-eol
        - include: comments-eol
  end-macros:
    - match: (?i)endm(?!\S)
      scope: support.function.directive.macro.asm.6809
      set: comments-eol


  # Structures directives
  structures:
    - match: (?i)struct(?!\S)
      scope: support.function.directive.structure.asm.6809
      set: comments-eol
  end-structures:
    - match: (?i)ends(truct)?(?!\S)
      scope: support.function.directive.structure.asm.6809
      set: comments-eol


  # Emulator extensions for MAME
  emulator-extensions:
    - match: '(?i)break|log(?!\S)'
      scope: support.function.directive.asm.6809
      set: comments-eol


  # Disassembly listing
  disassembly:
    - match: '(\h\h)\s'
      scope: comment.line.asm.6809
    - match: \s*
      set: column_2
    - include: line-ending


  numbers:
    # Binary number: Prefixed with "%" or suffixed with "b" or "B".
    - match: (?:(?:\%{{num_bin}})|(?:{{num_bin}}[bB]))
      scope: constant.numeric.binary.asm.6809

    # Octal number: Prefixed with "@" or suffixed with "Q", "q", "O" or "o".
    - match: (?:(?:\@{{num_oct}})|(?:{{num_oct}}[oqOQ]))
      scope: constant.numeric.octal.asm.6809

    # Hexadecimal number: Prefixed with "$", "0x" or "0X", or suffixed with "H".
    - match: (?i)(?:(?:(0x|\$){{num_hex}})|(?:{{num_hex}}h))
      scope: constant.numeric.hexadecimal.asm.6809

    # Decimal number: May be prefixed with "&" but is not required.
    - match: (?:(?:\&{{num_dec}})|(?:{{num_dec}}))
      scope: constant.numeric.decimal.asm.6809


  operators:
    - match: '[\+\-\*\/]'
      scope: keyword.operator.arithmetic.asm.6809
    - match: '[|&^~!]|<<|>>'
      scope: keyword.operator.bitwise.asm.6809
    - match: ','
      scope: operator.separator.asm.6809


  labels:
    - match: '{{symbol_identifier}}'
      scope: constant.other.asm.6809


  strings:
    - include: skip-white-spaces
    - match: \"
      scope: punctuation.definition.string.begin.asm.6809
      set:
        - meta_scope: string.quoted.double.asm.6809
        - match: \"
          scope: punctuation.definition.string.end.asm.6809
          set: comments-eol
        - include: line-ending
    - match: \'
      scope: punctuation.definition.string.begin.asm.6809
      set:
        - meta_scope: string.quoted.single.asm.6809
        - match: \'
          scope: punctuation.definition.string.end.asm.6809
          set: comments-eol
        - include: line-ending
    - match: '.*$'
      scope: string.unquoted.asm.6809
      pop: true
    - include: line-ending
