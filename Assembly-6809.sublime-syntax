%YAML 1.2
---

name: Assembly 6809/6309

file_extensions:
  - asm
  - src
  - s

scope: source.mc6809

variables:
  num_bin: '(?:[01][01]*)'
  num_oct: '(?:[0-7][0-7]*)'
  num_dec: '(?:\d\d*)'
  num_hex: '(?:\h\h*)'
  symbol_id: '(?:[A-Za-z\.\@\_!\?][A-Za-z0-9\.\@\$\_\?]*)'
  all_registers: '(?i)cc|dp|pc|[0abdefsuvwxy]'
  pragma_options:  '(?ix:
                      (no)?(
                        dollar(not)?local|
                        index0tonone|
                        undefextern|
                        cescapes|
                        (importundef)?export|
                        pcaspcr|
                        shadow|
                        list|
                        autobranchlength|
                        symbol(no)?case|
                        condundefzero|
                        6800compat|
                        forwardrefmax|
                        testmode|
                        c[cdt]?|
                        qrts|
                        m80ext|
                        6[83]09(conv)?|
                        newsource|
                        oldsource|
                        operandsizewarning|
                        emuext|
                        output|
                        expandcond
                      )
                    )'
  edtasm_id: '(\d{5}) '
  disassembly_id: '\h{4}\:\s'
  lwasm_list_id: '[\s\hs]*\([\s\w\-\.]*\):\d{5}[\s\d\(\)\+\?\[\]]{9}'


contexts:
  line-ending:
    - match: $
      pop: true

  skip-white-spaces:
    - match: \s*

  match-comments:
    - match: '(?:([*;])).*$\n?'
      scope: comment.line.mc6809
      captures:
        1: punctuation.definition.comment.mc6809
      pop: true

  comments-eol:
    - include: skip-white-spaces
    - include: match-comments
    - match: '.*$'
      scope: comment.line.mc6809
      pop: true


  main:
    # Edtasm file
    - match: '(?=^{{edtasm_id}})'
      push: edtasm-listing

    # Disassembly listing
    - match: '(?=^{{disassembly_id}})'
      push: disassembly-listing

    # LWASM assembly list output
    - match: '(?=^{{lwasm_list_id}})'
      push: lwasm-listing

    # Process column #1
    - match: ''
      push: column_1


  column_1:
    - match: ''
      pop: true

    # Line begins with a comment
    - match: '([*;#]).*$'
      scope: comment.line.mc6809
      captures:
        1: punctuation.definition.comment.mc6809
      pop: true

    # Label
    - match: '{{symbol_id}}'
      scope: entity.name.type.constant.mc6809
      set:
        - match: '\s+'
          set:
            - include: match-structures
            - include: match-macros
            - include: column_2
        - include: line-ending

    # Blank column one
    - match: '\s+'
      set: column_2

    - match: '.*$'
      scope: invalid.illegal
      pop: true


  column_2:
    - include: match-mnemonics
    - include: match-directives
    - include: match-pragmas
    - include: match-comments
    - include: match-emulator-extensions
    - include: match-os9

    # No match in column #2 - skip to next line
    - match: '.*$'
      pop: true

  match-mnemonics:
    - include: match-mnemonics-6x09
    - include: match-mnemonics-convenience
    - include: match-mnemonics-invalid
    - include: match-mnemonics-6800

  match-mnemonics-6x09:
    # Addressing mode: Inherent
    - match: |-
        (?ix:
             abx|daa|mul|nop|rt[is]|
             s(wi[23]?|exw?|ync)|
             ((as|ls|ro)[lr]|neg)[abd]|
             (clr|com|dec|inc|tst)[abdefw]|
             (p(sh|ul)[su]|ro[lr]|lsr)w
        )(?!\S)
      scope: keyword.operator.mc6809
      set: comments-eol

    # Branch instructions
    - match: (?i)l?b([cv][cs]|eq|gt|h[is]|l[ost]|r[an]|mi|pl|sr|[gnl]e)(?!\S)
      scope: keyword.operator.mc6809
      set:
        - match: '<'
          scope: constant.other.mc6809
          set: comments-eol
        - match: '>'
          scope: constant.other.mc6809
          set: comments-eol
        - match: '{{symbol_id}}'
          scope: constant.other.mc6809
          set: comments-eol
        - include: line-ending

    # Jump instructions
    - match: (?i)jmp|jsr(?!\S)
      scope: keyword.operator.mc6809
      set:
        - match: '\s*'
          set:
            - include: address-direct
            - include: address-index
            - include: address-extended
            - include: match-expr
            - match: '\S*'
              scope: invalid.illegal.variable.language.register.mc6809
              set: comments-eol
            - include: line-ending
        - include: line-ending

    # Addressing modes: Immediate #i8
    - match: (?i)(and|or)cc|(bit|ld)md|cwai(?!\S)
      scope: keyword.operator.mc6809
      set:
        - match: '\s*'
          set:
            - include: address-immediate
            - include: line-ending
        - include: line-ending

    # Addressing modes: Immediate r0,r1
    - match: (?i)(ad[cd]|and|eor|cmp|or|s(bc|ub)|tf)r|exg(?!\S)
      scope: keyword.operator.mc6809
      set:
        - match: '\s*'
          set:
            - match: (?i)(?:(?={{all_registers}},{{all_registers}}))
              set: highlight-registers
            - match: '\S*'
              scope: invalid.illegal.variable.language.register.mc6809
              set: comments-eol
            - include: line-ending
        - include: line-ending

    # Addressing modes: INSTRUCTION #i8;EA
    - match: (?i)[aeot]im(?!\S)
      scope: keyword.operator.mc6809
      set:
        - match: '\s*'
          set:
            - match: '#'
              scope: keyword.operator.immediate.mc6809
              set:
                - include: match-integers
                - include: line-ending
            - include: line-ending
        - include: line-ending

    # Addressing modes: Immediate, Direct, Indexed and Extended
    - match: |-
        (?ix:
            (adc|and|bit|e?or|sbc)[abd]|
            (add|sub)[abdefw]|
            (cmp|ld)[abdefsuwxy]|
            div[dq]|
            e?ord|
            ldq|
            muld
        )(?!\S)
      scope: keyword.operator.mc6809
      set:
        - match: '\s*'
          set:
            - include: address-immediate
            - include: address-direct
            - include: address-index
            - include: address-extended
            - include: match-expr
            - match: ''
              set: comments-eol
            - match: '\S*'
              scope: invalid.illegal.variable.language.register.mc6809
              set: comments-eol
            - include: line-ending
        - include: line-ending

    # Addressing mode: Direct r,sBit,dBit,addr
    # TODO!
    - match: '(?i)b(i?and|(i?e|i)?or)|(ld|st)bt(?!\S)'
      scope: keyword.operator.mc6809
      set:
        - match: '\s*'
          set:
            - include: address-immediate
            - match: ''
              set: comments-eol
        - include: line-ending

    # Addressing modes: Direct, Indexed and Extended
    - match: |-
        (?ix:
            (as|ls|ro)[lr]|
            clr|com|dec|inc|neg|tst|
            st[abdefqsuwxy]
        )(?!\S)
      scope: keyword.operator.mc6809
      set:
        - match: '\s*'
          set:
            - include: address-direct
            - include: address-index
            - include: address-extended
            - include: match-expr
            - match: ''
              set: comments-eol
            - match: '\S*'
              scope: invalid.illegal.variable.language.register.mc6809
              set: comments-eol
            - include: line-ending
        - include: line-ending

    # Addressing modes: Indexed
    - match: '(?i)lea[suxy](?!\S)'
      scope: keyword.operator.mc6809
      set:
        - match: '\s*'
          set:
            - include: address-index
            - include: match-expr
            - match: ''
              set: comments-eol
            - match: '\S*'
              scope: invalid.illegal.variable.language.register.mc6809
              set: comments-eol
            - include: line-ending
        - include: line-ending

    # Instructions: PSHS and PULS
    - match: '(?i)p(sh|ul)s(?!\S)'
      scope: keyword.operator.mc6809
      set:
        - match: '\s*'
          set:
            - match: '(?=[\S\w]*s[\S\w]*\s)'
              set: invalid-registers
            - match: ''
              set: validate-stack-registers
        - include: line-ending

    # Instructions: PSHU and PULU
    - match: '(?i)p(sh|ul)u(?!\S)'
      scope: keyword.operator.mc6809
      set:
        - match: '\s*'
          set:
            - match: '(?=[\S\w]*u[\S\w]*\s)'
              set: invalid-registers
            - match: ''
              set: validate-stack-registers
        - include: line-ending

    # Instruction: TFM
    - match: (?i)tfm(?!\S)
      scope: keyword.operator.mc6809
      set:
        - match: '\s*'
          set:
            - match: |-
                (?ix:
                    (?:
                      (?=[xyusd]\+,[xyusd]\+)|
                      (?=[xyusd]\-,[xyusd]\-)|
                      (?=[xyusd]\+,[xyusd]\b)|
                      (?=[xyusd],[xyusd]\+)
                    )
                )
              set: highlight-registers
            - match: '\S*'
              scope: invalid.illegal.variable.language.register.mc6809
              set: comments-eol
            - include: line-ending
        - include: line-ending

  # Convenience instructions (supported by lwasm)
  match-mnemonics-convenience:
    - match: (?i)(asr|clr|com|ls[lr]|neg|tst)q|(lsl|neg)[ef]|negw(?!\S)
      scope: keyword.operator.mc6809
      set: comments-eol

  # 6800 source code compatibility
  match-mnemonics-6800:
    - match: |-
        (?ix:
           \b(
             [acs]ba|
             (cl|se)([cfiv]|if)|
             cpx|
             (de|in)[sxy]|
             ta[bp]|
             t([bp]a|(sx|xs))|
             wai
           )
        )(?!\S)
      scope: keyword.operator.mc6809
      set: comments-eol


  # Invalid instructions
  match-mnemonics-invalid:
    - match: (?i)lslw(?!\S)
      scope: invalid.keyword.operator.mc6809
      set: comments-eol


  # Addressing mode - Immediate
  address-immediate:
    - match: \#
      scope: keyword.operator.immediate.mc6809
      set:
        - include: match-expr
        - include: line-ending
        - match: ''
          set: comments-eol

  # Addressing mode - Direct (8-bit offset)
  address-direct:
    - match: '<'
      scope: keyword.operator.direct.mc6809
      set:
        - include: match-expr
        - include: line-ending
        - match: '\S*'
          set: comments-eol


  # Addressing mode - Extended (16-bit offset)
  address-extended:
    - match: '>'
      scope: keyword.operator.extended.mc6809
      set:
        - include: match-expr
        - include: line-ending
        - match: '\S*'
          set: comments-eol


  # Addressing mode - Indexed
  address-index:
    # Non-indirect
    - match: |-
        (?ix:
            (?:
              (?=[abdefw],[suxy])|
              (?=,[suxyw])|
              (?=,[suxy]\+)|
              (?=,[suxyw]\+\+)|
              (?=,\-[suxy])|
              (?=,\-\-[suxyw])
            )
        )
      set: highlight-registers
    # Indirect
    - match: |-
        (?ix:
            (?:
              (?=\[,[suxyw]\])|
              (?=\[[abdefw],[suxy]\])|
              (?=\[,[suxyw]\+\+\])|
              (?=\[,\-\-[suxyw]\])
            )
        )
      set: highlight-registers-brackets
    # Extended Indirect
    - match: '\['
      scope: meta.brackets.mc6809 punctuation.section.brackets.begin.mc6809
      set:
        - match: '\]'
          scope: meta.brackets.mc6809 punctuation.section.brackets.end.mc6809
          set: comments-eol
        - include: match-integers
        - include: labels
        - include: line-ending


  # Validate stack registers
  validate-stack-registers:
    - match: ''
      set: highlight-registers
    - include: line-ending


  # Highlight string of registers and commas
  highlight-registers:
    - match: '{{all_registers}}'
      scope: variable.language.register.mc6809
    - match: ','
      scope: operator.separator.mc6809
    - match: '[\+\-]'
      scope: keyword.operator.arithmetic.mc6809
    - match: \s
      set: comments-eol
    - include: line-ending


  # Highlight string of registers and commas between brackets
  highlight-registers-brackets:
    - match: '{{all_registers}}'
      scope: meta.brackets.mc6809 variable.language.register.mc6809
    - match: ','
      scope: meta.brackets.mc6809 operator.separator.mc6809
    - match: '[\+\-]'
      scope: meta.brackets.mc6809 keyword.operator.arithmetic.mc6809
    - match: '\['
      scope: meta.brackets.mc6809 punctuation.section.brackets.begin.mc6809
    - match: '\]'
      scope: meta.brackets.mc6809 punctuation.section.brackets.end.mc6809
    - match: \s
      set: comments-eol
    - include: line-ending


  # Invalid string of registers
  invalid-registers:
    - match: '[\S\w]'
      scope: invalid.variable.language.register.mc6809
    - match: \s
      set: comments-eol
    - include: line-ending


  match-pragmas:
    - match: '(?i)pragma|opt|\*pragma(push|pop)?(?!\S)'
      scope: support.function.directive.assembler.mc6809
      set:
        - match: '\s*'
          set:
            - match: '{{pragma_options}}'
              scope: keyword.operator.mc6809
            - match: ','
              scope: operator.separator.mc6809
            - match: ''
              set: comments-eol
            - include: line-ending
        - include: line-ending


  match-directives:
    # data directives with expr
    - match: (?i)f[cdq]b|[zr]m[bdq]|d[bw]|\.(d[bsw]|4?byte|word|quad|blkb|rs)(?!\S)
      scope: storage.type.mc6809
      set:
        - match: '\s*'
          set:
            - include: match-expr
            - match: ','
              scope: operator.separator.mc6809
            - include: line-ending
            - match: ''
              set: comments-eol
        - include: line-ending

    # data directives with strings
    - match: (?i)fc[cns]|\.(asci[isz]|str[sz]?)(?!\S)
      scope: storage.type.mc6809
      set: strings

    # data directives with reserve zeroed bytes
    - match: (?i)fill|rzb|zmb|bsz|ds(?!\S)
      scope: storage.type.mc6809
      set:
        - match: '\s*'
          set:
            - include: match-expr
            - match: ','
              scope: operator.separator.mc6809
            - include: line-ending
            - match: ''
              set: comments-eol
        - include: line-ending

    # Address Definition
    - match: '(?i)(re)?org|equ|set(dp)?|align(?!\S)'
      scope: support.function.address.mc6809
      set:
        - match: '\s*'
          set:
            - include: match-expr
            - match: ''
              set: comments-eol
            - include: line-ending
        - include: line-ending

    # Conditional assembly with expr
    - match: '(?i)if(eq|ne|gt|lt|le|def|ndef)?(?!\S)'
      scope: support.function.conditional.mc6809
      set:
        - match: '\s*'
          set:
            - include: match-expr
            - match: ''
              set: comments-eol
            - include: line-ending
        - include: line-ending

    # Conditional assembly with pragma
    - match: '(?i)if(pragma|opt)(?!\S)'
      scope: support.function.conditional.mc6809
      set:
        - match: '\s*'
          set:
            - match: '{{pragma_options}}'
              scope: keyword.operator.mc6809
              set: comments-eol
            - include: line-ending
        - include: line-ending

    # Conditional assembly
    - match: '(?i)else|endc(?!\S)'
      scope: support.function.conditional.mc6809
      set: comments-eol

    # Conditional assembly (ccasm)
    - match: (?i)(end(if|p)|ifp[12]|ifge|cond)(?!\S)
      scope: support.function.conditional.mc6809
      set: comments-eol

    # Miscelaneous Directives
    - match: '(?i)include(bin)?|use|end(?!\S)'
      scope: support.function.directive.misc.mc6809
      set:
        - match: '\s*'
          set:
            - include: match-expr
            - include: line-ending
            - match: ''
              set: comments-eol
            - include: line-ending
        - include: line-ending


    # Misc directives with string
    - match: '(?i)error|warning(?!\S)'
      scope: support.function.directive.misc.mc6809
      set: strings
    - match: '(?i).module(?!\S)'
      scope: support.function.directive.misc.mc6809
      set: strings
    - match: '(?i)nam|ttl(?!\S)'
      scope: support.function.directive.misc.mc6809
      set: strings

    # end statement for macros and structures
    - include: match-end-macros
    - include: match-end-structures


  # OS9 Target Directives
  match-os9:
    - match: '(?i)os9|emod(?!\S)'
      scope: support.function.directive.mc6809
      set:
        - match: '\s*'
          set:
            - match: '{{symbol_id}}'
              scope: constant.other.mc6809
            - include: match-expr
            - match: ''
              set: comments-eol
            - include: line-ending
        - include: line-ending
    - match: '(?i)mod(?!\S)'
      scope: support.function.directive.mc6809
      set:
        - match: '\s*'
          set:
            - include: match-expr
            - match: ','
              scope: operator.separator.mc6809
            - include: line-ending


  # Macro directives
  match-macros:
    - match: (?i)macro(?!\S)
      scope: support.function.directive.macro.mc6809
      set:
        - match: (?i)noexpand(?!\S)
          scope: support.function.directive.macro.mc6809
          set: comments-eol
        - include: comments-eol
  match-end-macros:
    - match: (?i)endm(?!\S)
      scope: support.function.directive.macro.mc6809
      set: comments-eol


  # Structures directives
  match-structures:
    - match: (?i)struct(?!\S)
      scope: support.function.directive.structure.mc6809
      set: comments-eol
  match-end-structures:
    - match: (?i)ends(truct)?(?!\S)
      scope: support.function.directive.structure.mc6809
      set: comments-eol


  # Emulator extensions for MAME
  match-emulator-extensions:
    - match: '(?i)break|log(?!\S)'
      scope: support.function.directive.mc6809
      set: comments-eol


  match-expr:
    - include: match-integers
    - include: match-operators
    - include: match-parens
    - include: labels

  match-integers:
    - include: match-binary-integer
    - include: match-octal-integer
    - include: match-hex-integer
    - include: match-decimal-integer

  match-binary-integer:
    - match: '(\%){{num_bin}}'
      scope: constant.numeric.binary.mc6809
      captures:
        1: punctuation.definition.numeric.binary.mc6809
    - match: '{{num_bin}}([bB])'
      scope: constant.numeric.binary.mc6809
      captures:
        1: punctuation.definition.numeric.binary.mc6809

  match-octal-integer:
    - match: '(\@){{num_oct}}'
      scope: constant.numeric.octal.mc6809
      captures:
        1: punctuation.definition.numeric.octal.mc6809
    - match: '{{num_oct}}([oqOQ])'
      scope: constant.numeric.octal.mc6809
      captures:
        1: punctuation.definition.numeric.octal.mc6809

  match-hex-integer:
    - match: '(0[Xx]){{num_hex}}'
      scope: constant.numeric.hexadecimal.mc6809
      captures:
        1: punctuation.definition.numeric.hexadecimal.mc6809
    - match: '(\$){{num_hex}}'
      scope: constant.numeric.hexadecimal.mc6809
      captures:
        1: punctuation.definition.numeric.hexadecimal.mc6809
    - match: '{{num_hex}}([hH])'
      scope: constant.numeric.hexadecimal.mc6809
      captures:
        1: punctuation.definition.numeric.hexadecimal.mc6809

  match-decimal-integer:
    - match: '(\&)?{{num_dec}}'
      scope: constant.numeric.decimal.mc6809
      captures:
        1: punctuation.definition.numeric.decimal.mc6809

  match-operators: [
    {match: \&& , scope: keyword.operator.arithmetic.mc6809},
    {match: \&  , scope: keyword.operator.arithmetic.mc6809},
    {match: \|| , scope: keyword.operator.arithmetic.mc6809},
    {match: \|  , scope: keyword.operator.arithmetic.mc6809},
    {match: \+  , scope: keyword.operator.arithmetic.mc6809},
    {match: \-  , scope: keyword.operator.arithmetic.mc6809},
    {match: \*  , scope: keyword.operator.arithmetic.mc6809},
    {match: /   , scope: keyword.operator.arithmetic.mc6809},
    {match: \^  , scope: keyword.operator.arithmetic.mc6809},
    {match: \~  , scope: keyword.operator.arithmetic.mc6809},
    {match: \!  , scope: keyword.operator.arithmetic.mc6809},
    {match: \<< , scope: keyword.operator.arithmetic.mc6809},
    {match: \>> , scope: keyword.operator.arithmetic.mc6809},
    {match: \%  , scope: keyword.operator.arithmetic.mc6809}
  ]

  match-parens:
    - match: \(
      scope: punctuation.section.parens.begin.mc6809
      push:
        - match: \)
          scope: punctuation.section.parens.end.mc6809
          pop: true
        - include: line-ending
        - include: match-expr

  labels:
    - match: '{{symbol_id}}'
      scope: constant.other.mc6809

  strings:
    - include: skip-white-spaces
    - match: \"
      scope: punctuation.definition.string.begin.mc6809
      set:
        - meta_scope: string.quoted.double.mc6809
        - match: \"
          scope: punctuation.definition.string.end.mc6809
          set: comments-eol
        - include: line-ending
    - match: \'
      scope: punctuation.definition.string.begin.mc6809
      set:
        - meta_scope: string.quoted.single.mc6809
        - match: \'
          scope: punctuation.definition.string.end.mc6809
          set: comments-eol
        - include: line-ending
    - match: '.*$'
      scope: string.unquoted.mc6809
      pop: true
    - include: line-ending


  # LWASM assembly listing
  lwasm-listing:
    - match: '{{lwasm_list_id}}'
      scope: comment.line.lwasm.mc6809
      set: column_1

  # Edtasm file
  edtasm-listing:
    - match: '{{edtasm_id}}'
      captures:
        1: comment.line.edtasm.mc6809
      set: column_1

  # Disassembly listing
  disassembly-listing:
    - match: '{{disassembly_id}}'
      scope: comment.line.disasm.mc6809
      set:
        - match: '(\h\h)\s'
          scope: comment.line.disasm.mc6809
        - match: \s*
          set: column_2
        - include: line-ending
